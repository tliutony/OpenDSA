{
  "translations": {
    "en": {
      "sc1": "To remove the node with the maximum key value from a subtree, we recursively search the right subtree.",
      "sc2": "The base case is a little different here since we have to update the parent node's pointers. Here our base case is when the right child of the current node has no right child.",
      "sc3": "In this case, the right child is the node with the maximum key value, so we store its value.",
      "sc4": "We then remove the node with the maximum key value from the right subtree by setting <code>node</code>'s right child to the left subtree of the node with the maximum value.",
      "sc5": "We complete the base case by returning <code>maxValue</code>.",
      "sc6": "Otherwise, if the right child has a right child, that means there are still larger values in the right subtree.",
      "sc7": "We recursively continue searching the right subtree."
    }
  },
  "code": {
    "java_generic": [{
      "url": "../../../SourceCode/Java_Generic/MHC/BinarySearchTree.java",
      "lineNumbers": false,
      "startAfter": "/* *** ODSATag: BSTremoveMax *** */",
      "endBefore": "/* *** ODSAendTag: BSTremoveMax *** */",
      "tags": {
        "sig": 1,
        "basecase": [2,3,4],
        "storemax": 5,
        "setright": 8,
        "returnmax": 9,
        "checknull": 3,
        "else": 12,
        "rightrecursion": 13
      }
    }]
  }
}
