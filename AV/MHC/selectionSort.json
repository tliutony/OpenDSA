{
    "translations" :{
      "en": {
        "sc1": "Like insertion sort, selection sort maintains a sorted portion of the array so far, demarcated by the <code>fill</code> index.",
        "sc2": "The <code>fill</code> index is initialized to 0, and the sorted portion is empty.",
        "sc3": "We find the smallest value in the unsorted portion of the array, initializing <code>minValue</code> and <code>minPos</code> to the first value in the unsorted portion.",
        "sc4": "We then enter the inner loop, which iterates over the unsorted portion of the array, updating <code>minValue</code> and <code>minPos</code> if a smaller value is found.",
        "sc5": "10 is smaller than 20, so we update <code>minValue</code> and <code>minPos</code> to 10 and 1, respectively.",
        "sc6": "We then continue the inner loop, checking for a smaller value in the unsorted portion.",
        "sc7": "We complete the inner loop, and swap the smallest value with the first value in the unsorted portion.",
        "sc8": "Now one value in the array has been sorted. We increment the <code>fill</code> index, and repeat the process.",
        "sc9": "15 is smaller than 20, so we update <code>minValue</code> and <code>minPos</code>.",
        "sc10": "11 is smaller than 15, so we update <code>minValue</code> and <code>minPos</code>.",
        "sc11": "Now one value in the array has been sorted. We increment the <code>fill</code> index, and repeat the process until the entire array is sorted."
      }
    },
    "code": {
      "java_generic": [{
        "url": "../../../SourceCode/Java_Generic/MHC/Sorting.java",
        "lineNumbers": false,
        "startAfter": "/* *** ODSATag: selectionSort *** */",
        "endBefore": "/* *** ODSAendTag: selectionSort *** */",
        "tags": {
          "sig": 1,
          "outerloop": 3,
          "minValue": [5, 6],
          "innerloop": 7,
          "minPos": [8, 9, 10],
          "swap": [15, 16, 17]
        }
      }]
    }
  }
  