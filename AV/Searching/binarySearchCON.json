{
  "translations" :{
    "en": {
      "sc1": "The input is a sorted array, and in this example we will search for the record with key value 45. We will put a marker above 45 as a reminder that this is what we will be searching for.",
      "sc2": "We first check if the array is empty. If it is, we return -1 to indicate that the value is not in the array. Otherwise, we continue to the helper method call.",
      "sc3": "We begin searching by considering the entire array in our initial recursive call, since we don't know where the value is that we are looking for. We indicate this fact by setting the <code>low</code> and <code>high</code> indices to the ends of the array, at positions 0 and <code>values.length-1 = 15</code>, respectively.",
      "sc4": "Since we know low < high on the initial call, our next step is to compute the position in the middle of the current subarray. We add the position of <code>low</code> to the position of <code>high</code> and divide by 2, giving us position 7. Look at the value in position 7, which is 41.",
      "sc5": "Since 41 is less then 45, we know that no values to the left of position 7 will have value 45. So we keep <code>high</code> as it was, and move the <code>low</code> to position <code>middle + 1 = 8</code> for our next recursive call.",
      "sc6": "Now we compute the middle position between the current bounds (between array positions 8 and 15). Add the position of <code>low</code> to the position of <code>high</code> and divide the result by 2. This gives us index 11. Look at the value in position 11, which is 56.",
      "sc7": "Since 56 is larger then 45, we will keep the current <code>low</code> and move the <code>high</code> to position <code>middle - 1 = 10</code> for our next recursive call.",
      "sc8": "Now we compute the middle position between the current bounds (between array positions 8 and 10). Add the position of <code>low</code> to the position of <code>high</code> and divide the result by 2. This gives us index 9. Look at the value in position 9, which is 51.",
      "sc9": "Since 51 is larger then 45, we will keep the current <code>low</code> and move the <code>high</code> to position <code>middle - 1 = 8</code> for our next recursive call.",
      "sc10": "Now we compute the middle position between the current bounds (which is now only position 8). Add the position of <code>low</code> to the position of <code>high</code> and divide the result by 2. This gives us index 8. Look at the value in position 8, which is 45.",
      "sc11": "We have now found value 45, which is what we are looking for.",
      "sc12": "Note that if the value in position 8 had not been what we were looking for, we would have made one more recursive call, but would have hit this base case of <code>low > high</code> and returned -1, to indicate that the value is not in the array.",
      "sc13": "During the course of the binary search, we looked at the values in 4 array positions (shown in red)."
    }
  },
  "code" : {
    "java": {
      "url": "../../../SourceCode/Java/Searching/Bsearch.java",
      "startAfter": "/* *** ODSATag: BinarySearch *** */",
      "endBefore": "/* *** ODSAendTag: BinarySearch *** */",
      "lineNumbers": false,
      "tags": {
        "sig": 3,
        "init": [4, 5],
        "while": 6,
        "compute": 7,
        "right": 8,
        "left": 9,
	"found": 10,
        "return": 12
      }
    },
    "java_generic": {
      "url": "../../../SourceCode/Java_Generic/Searching/Bsearch.java",
      "startAfter": "/* *** ODSATag: BinarySearch *** */",
      "endBefore": "/* *** ODSAendTag: BinarySearch *** */",
      "lineNumbers": false,
      "tags": {
        "sig": 1,
        "empty": 3,
        "init": [8, 11],
        "while": 13,
        "compute": 18,
        "right": 30,
        "left": [25, 26],
	      "found": [20, 21],
        "return": 34
      }
    },
    "c++": {
      "url": "../../../SourceCode/C++/Searching/Bsearch.cpp",
      "lineNumbers": false,
      "tags": {
        "sig": 3,
        "init": [4, 5],
        "while": 6,
        "compute": 7,
        "right": 8,
        "left": 9,
	"found": 10,
        "return": 12
      }
    }
  }
}
