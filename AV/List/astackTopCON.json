{
  "translations" :{
    "en": {
      "sc1": "One choice is to make the top of the stack be at position 0 in the ArrayList. In terms of list functions, all push and pop operations would then be on the element at position 0.",
      "sc2": "This implementation is inefficient, because now every push or pop operation will require that all elements currently in the stack be shifted one position in the array, for a cost of $O(n)$ if there are $n$ elements.",
      "sc3": "The other choice is have the top of the stack be at position $n-1$ when there are $n$ elements in the stack. In other words, as elements are pushed onto the stack, they are appended to the end of the ArrayList.",
      "sc4": "Method <code>pop</code> removes the last element. In this case, the cost for each push or pop operation is only $O(1)$."
    }
  }
}
